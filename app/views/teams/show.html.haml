.row.refreshable#teams-index
  .col-md-8
    = box(@team.numbered_name) do
      %table.table.table-condensed
        %tr
          %th= @team.class.human_attribute_name :name
          %td= @team.name
        %tr
          %th= @team.class.human_attribute_name :shortcut
          %td= @team.shortcut
        - if @team.federal_state.present? && Competition.one.federal_states?
          %tr
            %th= @team.class.human_attribute_name :federal_state
            %td= @team.federal_state
        %tr
          %th= @team.class.human_attribute_name :number
          %td= @team.number
        %tr
          %th= @team.class.human_attribute_name :band
          %td= @team.band
        - if admin_logged_in? || @team.object.people.exists?
          %tr{ admin_logged_in? && !@team.assessment_request_group_competitor_valid? ? { class: 'danger' } : {} }
            %th= @team.class.human_attribute_name :people
            %td= @team.people.count
        - @tags.each do |tag|
          %tr
            %th= tag
            %td= @team.tags.include?(tag) ? 'Ja' : 'Nein'
        - if admin_logged_in?
          - @team.people_assessments.each do |assessment|
            %tr{ @team.list_entries_group_competitor(assessment) > Competition.one.group_run_count ? { class: 'danger' } : {} }
              %th= assessment.decorate
              %td #{@team.list_entries_group_competitor(assessment)} von #{Competition.one.group_run_count}


    = box("Gewünschte #{Assessment.model_name.human count: 0}") do |box|
      %table.table.table-condensed
        - Assessment.requestable_for_team(@team.band).each do |assessment|
          - decorated_assessment = assessment.decorate
          %tr
            %th
              = discipline_image decorated_assessment.discipline
              = decorated_assessment
            %td
              - if @team.request_for(assessment).present?
                - if assessment.fire_relay?
                  #{@team.request_for(assessment).relay_count} x
                %span.glyphicon.glyphicon-ok
                = t("assessment_types.#{@team.request_for(assessment).assessment_type}")
              - else
                %span.glyphicon.glyphicon-remove
      - if admin_logged_in?
        - box.footer do
          = btn_link_to 'Wertungen bearbeiten', { action: :edit_assessment_requests }, remote: true

  - if admin_logged_in?
    .col-md-4
      = box('Aktionen') do
        = block_link_to 'Wettkämpfer hinzufügen', new_person_path(team: @team), remote: true
        = block_link_to 'Löschen', { action: :destroy }, method: :delete, data: { confirm: 'Mannschaft wirklich löschen? Alle Zeiten usw. werden auch gelöscht!' }
        = block_link_to 'Name bearbeiten', { action: :edit }
        = block_link_to 'Wertungen bearbeiten', { action: :edit_assessment_requests }, remote: true

  - if admin_logged_in? || @team.object.people.exists?
    .col-md-12
      = box(@team.class.human_attribute_name(:people)) do |box|
        - if admin_logged_in?
          - box.header do
            .pull-right
              = btn_link_to 'Wettkämpfer hinzufügen', new_person_path(team: @team), remote: true
            .clearfix
        = render 'people_table', collection: @team.object.people.registration_order.map(&:decorate)
        - if admin_logged_in?
          - box.footer do
            Die Reihenfolge der Personen kann einfach verschoben werden. Dadurch soll ein besseres Abgleichen mit der Eingabe möglich sein.

  - if @team.list_entries.exists?
    .col-md-12
      = box('Startlisten') do
        %table.table.table-bordered
          %tr
            %th Startliste
            %th Lauf
            %th Bahn
          - @team.list_entries.sort_by { |entry| entry.list.decorate.to_s }.each do |entry|
            %tr
              %td= link_to(entry.list.decorate, score_list_path(entry.list, anchor: "jump-run-#{entry.run}"))
              %td= entry.run
              %td= entry.track
